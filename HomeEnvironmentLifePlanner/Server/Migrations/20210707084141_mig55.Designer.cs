// <auto-generated />
using System;
using HomeEnvironmentLifePlanner.Server.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace HomeEnvironmentLifePlanner.Server.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20210707084141_mig55")]
    partial class mig55
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseIdentityColumns()
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.1");

            modelBuilder.Entity("HomeEnvironmentLifePlanner.Server.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("HomeEnvironmentLifePlanner.Shared.Models.Account", b =>
                {
                    b.Property<int>("AcC_Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("AcC_Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AcC_ReferenceNumber")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AcC_Id");

                    b.ToTable("Accounts");

                    b.HasData(
                        new
                        {
                            AcC_Id = 1,
                            AcC_Name = "Gotówka_Rafał",
                            AcC_ReferenceNumber = " "
                        },
                        new
                        {
                            AcC_Id = 2,
                            AcC_Name = "Gotówka_Paulina",
                            AcC_ReferenceNumber = " "
                        },
                        new
                        {
                            AcC_Id = 3,
                            AcC_Name = "Gotówka_Wakacje",
                            AcC_ReferenceNumber = " "
                        },
                        new
                        {
                            AcC_Id = 4,
                            AcC_Name = "Konto",
                            AcC_ReferenceNumber = " "
                        });
                });

            modelBuilder.Entity("HomeEnvironmentLifePlanner.Shared.Models.BankStatementHeader", b =>
                {
                    b.Property<int>("BsH_Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<DateTime>("BsH_CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("BsH_DateFrom")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("BsH_DateTo")
                        .HasColumnType("datetime2");

                    b.Property<string>("BsH_Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("BsH_Id");

                    b.ToTable("BankStatmentHeaders");
                });

            modelBuilder.Entity("HomeEnvironmentLifePlanner.Shared.Models.BankStatementPosition", b =>
                {
                    b.Property<int>("BsP_Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<decimal>("BsP_Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("BsP_BSHID")
                        .HasColumnType("int");

                    b.Property<int>("BsP_CURID")
                        .HasColumnType("int");

                    b.Property<string>("BsP_Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("BsP_ExecutionDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("BsP_ImportDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("BsP_IsImportedToTransactions")
                        .HasColumnType("bit");

                    b.Property<int?>("BsP_RecommendedAccountId")
                        .HasColumnType("int");

                    b.Property<int?>("BsP_RecommendedContractorId")
                        .HasColumnType("int");

                    b.Property<string>("BsP_SenderReceiver")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BsP_TransactionType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Bsp_IsPreparedToImport")
                        .HasColumnType("bit");

                    b.HasKey("BsP_Id");

                    b.HasIndex("BsP_BSHID");

                    b.HasIndex("BsP_CURID");

                    b.HasIndex("BsP_RecommendedAccountId");

                    b.HasIndex("BsP_RecommendedContractorId");

                    b.ToTable("BankStatmentPositions");
                });

            modelBuilder.Entity("HomeEnvironmentLifePlanner.Shared.Models.BankStatementSubPosition", b =>
                {
                    b.Property<int>("BsS_Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<decimal>("BsS_Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("BsS_BSPID")
                        .HasColumnType("int");

                    b.Property<int?>("BsS_CATID")
                        .HasColumnType("int");

                    b.HasKey("BsS_Id");

                    b.HasIndex("BsS_BSPID");

                    b.HasIndex("BsS_CATID");

                    b.ToTable("BankStatmentSubPositions");
                });

            modelBuilder.Entity("HomeEnvironmentLifePlanner.Shared.Models.Category", b =>
                {
                    b.Property<int>("CaT_Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("CaT_CTYID")
                        .HasColumnType("int");

                    b.Property<string>("CaT_Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CaT_Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("CaT_ParentId")
                        .HasColumnType("int");

                    b.Property<string>("CaT_ReferenceNumber")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CaT_Id");

                    b.HasIndex("CaT_CTYID");

                    b.HasIndex("CaT_ParentId");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            CaT_Id = 1,
                            CaT_CTYID = 1,
                            CaT_Description = "Grupa o najwyższym poziomie",
                            CaT_Name = "Grupa Główna",
                            CaT_ReferenceNumber = "<BRAK>"
                        },
                        new
                        {
                            CaT_Id = 2,
                            CaT_CTYID = 2,
                            CaT_Description = "Wszystkie źródła przychodów",
                            CaT_Name = "Całkowite przychody",
                            CaT_ParentId = 1,
                            CaT_ReferenceNumber = "<BRAK>"
                        },
                        new
                        {
                            CaT_Id = 3,
                            CaT_CTYID = 3,
                            CaT_Description = "",
                            CaT_Name = "Jedzenie",
                            CaT_ParentId = 1,
                            CaT_ReferenceNumber = "<BRAK>"
                        },
                        new
                        {
                            CaT_Id = 4,
                            CaT_CTYID = 3,
                            CaT_Description = "",
                            CaT_Name = "Mieszkania",
                            CaT_ParentId = 1,
                            CaT_ReferenceNumber = "<BRAK>"
                        },
                        new
                        {
                            CaT_Id = 5,
                            CaT_CTYID = 2,
                            CaT_Description = "",
                            CaT_Name = "Transport",
                            CaT_ParentId = 1,
                            CaT_ReferenceNumber = "<BRAK>"
                        },
                        new
                        {
                            CaT_Id = 6,
                            CaT_CTYID = 3,
                            CaT_Description = "",
                            CaT_Name = "Telekomunikacja",
                            CaT_ParentId = 1,
                            CaT_ReferenceNumber = "<BRAK>"
                        },
                        new
                        {
                            CaT_Id = 7,
                            CaT_CTYID = 3,
                            CaT_Description = "",
                            CaT_Name = "Opieka zdrowotna",
                            CaT_ParentId = 1,
                            CaT_ReferenceNumber = "<BRAK>"
                        },
                        new
                        {
                            CaT_Id = 8,
                            CaT_CTYID = 2,
                            CaT_Description = "",
                            CaT_Name = "Ubrania",
                            CaT_ParentId = 1,
                            CaT_ReferenceNumber = "<BRAK>"
                        },
                        new
                        {
                            CaT_Id = 9,
                            CaT_CTYID = 2,
                            CaT_Description = "",
                            CaT_Name = "Higiena",
                            CaT_ParentId = 1,
                            CaT_ReferenceNumber = "<BRAK>"
                        },
                        new
                        {
                            CaT_Id = 10,
                            CaT_CTYID = 2,
                            CaT_Description = "",
                            CaT_Name = "Rozrywka",
                            CaT_ParentId = 1,
                            CaT_ReferenceNumber = "<BRAK>"
                        },
                        new
                        {
                            CaT_Id = 11,
                            CaT_CTYID = 2,
                            CaT_Description = "",
                            CaT_Name = "Inne wydatki",
                            CaT_ParentId = 1,
                            CaT_ReferenceNumber = "<BRAK>"
                        },
                        new
                        {
                            CaT_Id = 12,
                            CaT_CTYID = 2,
                            CaT_Description = "Wypłata bez premii",
                            CaT_Name = "Pensja Rafał",
                            CaT_ParentId = 2,
                            CaT_ReferenceNumber = "<BRAK>"
                        },
                        new
                        {
                            CaT_Id = 13,
                            CaT_CTYID = 2,
                            CaT_Description = "Wypłata bez premii",
                            CaT_Name = "Pensja Paulina",
                            CaT_ParentId = 2,
                            CaT_ReferenceNumber = "<BRAK>"
                        },
                        new
                        {
                            CaT_Id = 14,
                            CaT_CTYID = 2,
                            CaT_Description = "Premia roczna (tzw świąteczna)",
                            CaT_Name = "Premia Roczna Rafał",
                            CaT_ParentId = 2,
                            CaT_ReferenceNumber = "<BRAK>"
                        },
                        new
                        {
                            CaT_Id = 15,
                            CaT_CTYID = 2,
                            CaT_Description = "Trzynastka",
                            CaT_Name = "Premia Roczna Paulina",
                            CaT_ParentId = 2,
                            CaT_ReferenceNumber = "<BRAK>"
                        },
                        new
                        {
                            CaT_Id = 16,
                            CaT_CTYID = 2,
                            CaT_Description = "Kwota tylko wynajmu ( bez opłat za rachunki)",
                            CaT_Name = "Wynajem Mieszkania Szarych Szeregów",
                            CaT_ParentId = 2,
                            CaT_ReferenceNumber = "<BRAK>"
                        },
                        new
                        {
                            CaT_Id = 17,
                            CaT_CTYID = 2,
                            CaT_Description = "Wpłata najemcy na poczet rachunku za prąd",
                            CaT_Name = "Wpłata Najmcy Prąd",
                            CaT_ParentId = 2,
                            CaT_ReferenceNumber = "<BRAK>"
                        },
                        new
                        {
                            CaT_Id = 18,
                            CaT_CTYID = 2,
                            CaT_Description = "Wpłata najemcy na poczet czynszu( wraz z zaliczką na ogrzewanie i wode)",
                            CaT_Name = "Wpłata Najmcy Czynsz",
                            CaT_ParentId = 2,
                            CaT_ReferenceNumber = "<BRAK>"
                        },
                        new
                        {
                            CaT_Id = 19,
                            CaT_CTYID = 2,
                            CaT_Description = " ",
                            CaT_Name = "Wynajem Garażu",
                            CaT_ParentId = 2,
                            CaT_ReferenceNumber = "<BRAK>"
                        },
                        new
                        {
                            CaT_Id = 20,
                            CaT_CTYID = 2,
                            CaT_Description = "500+ ",
                            CaT_Name = "Pięćset plus",
                            CaT_ParentId = 2,
                            CaT_ReferenceNumber = "<BRAK>"
                        });
                });

            modelBuilder.Entity("HomeEnvironmentLifePlanner.Shared.Models.CategoryType", b =>
                {
                    b.Property<int>("CtY_Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("CtY_Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CtY_Value")
                        .HasColumnType("int");

                    b.HasKey("CtY_Id");

                    b.ToTable("CategoryTypes");

                    b.HasData(
                        new
                        {
                            CtY_Id = 1,
                            CtY_Name = "Przychód/Wydatek",
                            CtY_Value = 0
                        },
                        new
                        {
                            CtY_Id = 2,
                            CtY_Name = "Przychód",
                            CtY_Value = 1
                        },
                        new
                        {
                            CtY_Id = 3,
                            CtY_Name = "Wydatek",
                            CtY_Value = 2
                        });
                });

            modelBuilder.Entity("HomeEnvironmentLifePlanner.Shared.Models.Contractor", b =>
                {
                    b.Property<int>("CtR_Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("CtR_Acronym")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CtR_CTGID")
                        .HasColumnType("int");

                    b.Property<string>("CtR_City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CtR_Country")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CtR_Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CtR_ReferenceNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CtR_Street")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CtR_Id");

                    b.HasIndex("CtR_CTGID");

                    b.ToTable("Contractors");
                });

            modelBuilder.Entity("HomeEnvironmentLifePlanner.Shared.Models.ContractorGroup", b =>
                {
                    b.Property<int>("CtG_Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("CtG_Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("CtG_ParentId")
                        .HasColumnType("int");

                    b.HasKey("CtG_Id");

                    b.HasIndex("CtG_ParentId");

                    b.ToTable("ContractorGroups");

                    b.HasData(
                        new
                        {
                            CtG_Id = 1,
                            CtG_Name = "Grupa Główna"
                        });
                });

            modelBuilder.Entity("HomeEnvironmentLifePlanner.Shared.Models.Currency", b =>
                {
                    b.Property<int>("CuR_Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("CuR_Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CuR_Id");

                    b.ToTable("Currencies");

                    b.HasData(
                        new
                        {
                            CuR_Id = 1,
                            CuR_Name = "PLN"
                        },
                        new
                        {
                            CuR_Id = 2,
                            CuR_Name = "EUR"
                        },
                        new
                        {
                            CuR_Id = 3,
                            CuR_Name = "GBP"
                        });
                });

            modelBuilder.Entity("HomeEnvironmentLifePlanner.Shared.Models.PaymentType", b =>
                {
                    b.Property<int>("PyT_Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("PyT_ACCID")
                        .HasColumnType("int");

                    b.Property<string>("PyT_Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PyT_ReferenceNumber")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PyT_Id");

                    b.HasIndex("PyT_ACCID");

                    b.ToTable("PaymentTypes");
                });

            modelBuilder.Entity("HomeEnvironmentLifePlanner.Shared.Models.Product", b =>
                {
                    b.Property<int>("PrD_Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("PrD_Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PrD_Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PrD_PRGID")
                        .HasColumnType("int");

                    b.HasKey("PrD_Id");

                    b.HasIndex("PrD_PRGID");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("HomeEnvironmentLifePlanner.Shared.Models.ProductGroup", b =>
                {
                    b.Property<int>("PrG_Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("PrG_Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PrG_Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PrG_ParentId")
                        .HasColumnType("int");

                    b.HasKey("PrG_Id");

                    b.HasIndex("PrG_ParentId");

                    b.ToTable("ProductGroups");

                    b.HasData(
                        new
                        {
                            PrG_Id = 1,
                            PrG_Code = "GŁÓWNA",
                            PrG_Name = "Grupa Główna"
                        });
                });

            modelBuilder.Entity("HomeEnvironmentLifePlanner.Shared.Models.ProductPrice", b =>
                {
                    b.Property<int>("PrP_Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("PrP_CTRID")
                        .HasColumnType("int");

                    b.Property<DateTime>("PrP_Date")
                        .HasColumnType("datetime2");

                    b.Property<int>("PrP_PRDID")
                        .HasColumnType("int");

                    b.Property<decimal>("PrP_Price")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("PrP_Id");

                    b.HasIndex("PrP_CTRID");

                    b.HasIndex("PrP_PRDID");

                    b.ToTable("ProductPrices");
                });

            modelBuilder.Entity("HomeEnvironmentLifePlanner.Shared.Models.ShoppingListHeader", b =>
                {
                    b.Property<int>("SlH_Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int?>("SlH_BSPID")
                        .HasColumnType("int");

                    b.Property<DateTime>("SlH_Date")
                        .HasColumnType("datetime2");

                    b.Property<int>("SlH_Month")
                        .HasColumnType("int");

                    b.Property<int>("SlH_Number")
                        .HasColumnType("int");

                    b.Property<int>("SlH_Year")
                        .HasColumnType("int");

                    b.HasKey("SlH_Id");

                    b.HasIndex("SlH_BSPID");

                    b.ToTable("ShoppingListHeaders");
                });

            modelBuilder.Entity("HomeEnvironmentLifePlanner.Shared.Models.ShoppingListPosition", b =>
                {
                    b.Property<int>("SlP_Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<decimal?>("SlP_Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("SlP_AssumedQuantity")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("SlP_BSSID")
                        .HasColumnType("int");

                    b.Property<int>("SlP_PRDID")
                        .HasColumnType("int");

                    b.Property<decimal>("SlP_RealizedQuantity")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("SlP_SLHID")
                        .HasColumnType("int");

                    b.HasKey("SlP_Id");

                    b.HasIndex("SlP_BSSID");

                    b.HasIndex("SlP_SLHID");

                    b.ToTable("ShoppingListPositions");
                });

            modelBuilder.Entity("HomeEnvironmentLifePlanner.Shared.Models.TransactionHeader", b =>
                {
                    b.Property<int>("TrH_Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int?>("TrH_BSPID")
                        .HasColumnType("int");

                    b.Property<int>("TrH_CTRID")
                        .HasColumnType("int");

                    b.Property<int>("TrH_CURID")
                        .HasColumnType("int");

                    b.Property<DateTime>("TrH_CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("TrH_Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("TrH_ExecutionDate")
                        .HasColumnType("datetime2");

                    b.HasKey("TrH_Id");

                    b.HasIndex("TrH_BSPID");

                    b.HasIndex("TrH_CTRID");

                    b.HasIndex("TrH_CURID");

                    b.ToTable("TransactionHeaders");
                });

            modelBuilder.Entity("HomeEnvironmentLifePlanner.Shared.Models.TransactionPosition", b =>
                {
                    b.Property<int>("TrP_Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<decimal>("TrP_Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("TrP_BSSID")
                        .HasColumnType("int");

                    b.Property<int?>("TrP_CATID")
                        .HasColumnType("int");

                    b.Property<int?>("TrP_PRDID")
                        .HasColumnType("int");

                    b.Property<decimal?>("TrP_Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("TrP_Quantity")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("TrP_TRHID")
                        .HasColumnType("int");

                    b.Property<int?>("TrP_Unit")
                        .HasColumnType("int");

                    b.HasKey("TrP_Id");

                    b.HasIndex("TrP_BSSID");

                    b.HasIndex("TrP_CATID");

                    b.HasIndex("TrP_TRHID");

                    b.ToTable("TransactionPositions");
                });

            modelBuilder.Entity("IdentityServer4.EntityFramework.Entities.DeviceFlowCodes", b =>
                {
                    b.Property<string>("UserCode")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("ClientId")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Data")
                        .IsRequired()
                        .HasMaxLength(50000)
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("DeviceCode")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime?>("Expiration")
                        .IsRequired()
                        .HasColumnType("datetime2");

                    b.Property<string>("SessionId")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("SubjectId")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("UserCode");

                    b.HasIndex("DeviceCode")
                        .IsUnique();

                    b.HasIndex("Expiration");

                    b.ToTable("DeviceCodes");
                });

            modelBuilder.Entity("IdentityServer4.EntityFramework.Entities.PersistedGrant", b =>
                {
                    b.Property<string>("Key")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("ClientId")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime?>("ConsumedTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Data")
                        .IsRequired()
                        .HasMaxLength(50000)
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime?>("Expiration")
                        .HasColumnType("datetime2");

                    b.Property<string>("SessionId")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("SubjectId")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Key");

                    b.HasIndex("Expiration");

                    b.HasIndex("SubjectId", "ClientId", "Type");

                    b.HasIndex("SubjectId", "SessionId", "Type");

                    b.ToTable("PersistedGrants");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("HomeEnvironmentLifePlanner.Shared.Models.BankStatementPosition", b =>
                {
                    b.HasOne("HomeEnvironmentLifePlanner.Shared.Models.BankStatementHeader", "BankStatmentHeader")
                        .WithMany("BankStatementPositions")
                        .HasForeignKey("BsP_BSHID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HomeEnvironmentLifePlanner.Shared.Models.Currency", "Currency")
                        .WithMany()
                        .HasForeignKey("BsP_CURID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HomeEnvironmentLifePlanner.Shared.Models.Account", "RecommendedAccount")
                        .WithMany()
                        .HasForeignKey("BsP_RecommendedAccountId");

                    b.HasOne("HomeEnvironmentLifePlanner.Shared.Models.Contractor", "RecommendedContractor")
                        .WithMany()
                        .HasForeignKey("BsP_RecommendedContractorId");

                    b.Navigation("BankStatmentHeader");

                    b.Navigation("Currency");

                    b.Navigation("RecommendedAccount");

                    b.Navigation("RecommendedContractor");
                });

            modelBuilder.Entity("HomeEnvironmentLifePlanner.Shared.Models.BankStatementSubPosition", b =>
                {
                    b.HasOne("HomeEnvironmentLifePlanner.Shared.Models.BankStatementPosition", "BankStatementPosition")
                        .WithMany("BankStatementSubPositions")
                        .HasForeignKey("BsS_BSPID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HomeEnvironmentLifePlanner.Shared.Models.Category", "Category")
                        .WithMany()
                        .HasForeignKey("BsS_CATID");

                    b.Navigation("BankStatementPosition");

                    b.Navigation("Category");
                });

            modelBuilder.Entity("HomeEnvironmentLifePlanner.Shared.Models.Category", b =>
                {
                    b.HasOne("HomeEnvironmentLifePlanner.Shared.Models.CategoryType", "CategoryType")
                        .WithMany()
                        .HasForeignKey("CaT_CTYID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HomeEnvironmentLifePlanner.Shared.Models.Category", "Category1")
                        .WithMany("CaT_Children")
                        .HasForeignKey("CaT_ParentId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Category1");

                    b.Navigation("CategoryType");
                });

            modelBuilder.Entity("HomeEnvironmentLifePlanner.Shared.Models.Contractor", b =>
                {
                    b.HasOne("HomeEnvironmentLifePlanner.Shared.Models.ContractorGroup", "ContractorGroup")
                        .WithMany()
                        .HasForeignKey("CtR_CTGID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ContractorGroup");
                });

            modelBuilder.Entity("HomeEnvironmentLifePlanner.Shared.Models.ContractorGroup", b =>
                {
                    b.HasOne("HomeEnvironmentLifePlanner.Shared.Models.ContractorGroup", "ContractorGroup1")
                        .WithMany("CtG_Children")
                        .HasForeignKey("CtG_ParentId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("ContractorGroup1");
                });

            modelBuilder.Entity("HomeEnvironmentLifePlanner.Shared.Models.PaymentType", b =>
                {
                    b.HasOne("HomeEnvironmentLifePlanner.Shared.Models.Account", "Account")
                        .WithMany()
                        .HasForeignKey("PyT_ACCID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");
                });

            modelBuilder.Entity("HomeEnvironmentLifePlanner.Shared.Models.Product", b =>
                {
                    b.HasOne("HomeEnvironmentLifePlanner.Shared.Models.ProductGroup", "ProductGroup")
                        .WithMany()
                        .HasForeignKey("PrD_PRGID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProductGroup");
                });

            modelBuilder.Entity("HomeEnvironmentLifePlanner.Shared.Models.ProductGroup", b =>
                {
                    b.HasOne("HomeEnvironmentLifePlanner.Shared.Models.ProductGroup", "ProductGroup1")
                        .WithMany("PrG_Children")
                        .HasForeignKey("PrG_ParentId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("ProductGroup1");
                });

            modelBuilder.Entity("HomeEnvironmentLifePlanner.Shared.Models.ProductPrice", b =>
                {
                    b.HasOne("HomeEnvironmentLifePlanner.Shared.Models.Contractor", "Contractor")
                        .WithMany()
                        .HasForeignKey("PrP_CTRID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HomeEnvironmentLifePlanner.Shared.Models.Product", "Product")
                        .WithMany("ProductPrices")
                        .HasForeignKey("PrP_PRDID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Contractor");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("HomeEnvironmentLifePlanner.Shared.Models.ShoppingListHeader", b =>
                {
                    b.HasOne("HomeEnvironmentLifePlanner.Shared.Models.BankStatementPosition", "BankStatmentPosition")
                        .WithMany()
                        .HasForeignKey("SlH_BSPID");

                    b.Navigation("BankStatmentPosition");
                });

            modelBuilder.Entity("HomeEnvironmentLifePlanner.Shared.Models.ShoppingListPosition", b =>
                {
                    b.HasOne("HomeEnvironmentLifePlanner.Shared.Models.BankStatementSubPosition", "BankStatementSubPosition")
                        .WithMany()
                        .HasForeignKey("SlP_BSSID");

                    b.HasOne("HomeEnvironmentLifePlanner.Shared.Models.ShoppingListHeader", "ShoppingListHeader")
                        .WithMany("ShoppingListPositions")
                        .HasForeignKey("SlP_SLHID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BankStatementSubPosition");

                    b.Navigation("ShoppingListHeader");
                });

            modelBuilder.Entity("HomeEnvironmentLifePlanner.Shared.Models.TransactionHeader", b =>
                {
                    b.HasOne("HomeEnvironmentLifePlanner.Shared.Models.BankStatementPosition", "BankStatmentPosition")
                        .WithMany()
                        .HasForeignKey("TrH_BSPID");

                    b.HasOne("HomeEnvironmentLifePlanner.Shared.Models.Contractor", "Contractor")
                        .WithMany()
                        .HasForeignKey("TrH_CTRID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HomeEnvironmentLifePlanner.Shared.Models.Currency", "Currency")
                        .WithMany()
                        .HasForeignKey("TrH_CURID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BankStatmentPosition");

                    b.Navigation("Contractor");

                    b.Navigation("Currency");
                });

            modelBuilder.Entity("HomeEnvironmentLifePlanner.Shared.Models.TransactionPosition", b =>
                {
                    b.HasOne("HomeEnvironmentLifePlanner.Shared.Models.BankStatementSubPosition", "BankStatementSubPosition")
                        .WithMany()
                        .HasForeignKey("TrP_BSSID");

                    b.HasOne("HomeEnvironmentLifePlanner.Shared.Models.Category", "Category")
                        .WithMany()
                        .HasForeignKey("TrP_CATID");

                    b.HasOne("HomeEnvironmentLifePlanner.Shared.Models.TransactionHeader", "TransactionHeader")
                        .WithMany("TransactionPositions")
                        .HasForeignKey("TrP_TRHID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BankStatementSubPosition");

                    b.Navigation("Category");

                    b.Navigation("TransactionHeader");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("HomeEnvironmentLifePlanner.Server.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("HomeEnvironmentLifePlanner.Server.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HomeEnvironmentLifePlanner.Server.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("HomeEnvironmentLifePlanner.Server.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("HomeEnvironmentLifePlanner.Shared.Models.BankStatementHeader", b =>
                {
                    b.Navigation("BankStatementPositions");
                });

            modelBuilder.Entity("HomeEnvironmentLifePlanner.Shared.Models.BankStatementPosition", b =>
                {
                    b.Navigation("BankStatementSubPositions");
                });

            modelBuilder.Entity("HomeEnvironmentLifePlanner.Shared.Models.Category", b =>
                {
                    b.Navigation("CaT_Children");
                });

            modelBuilder.Entity("HomeEnvironmentLifePlanner.Shared.Models.ContractorGroup", b =>
                {
                    b.Navigation("CtG_Children");
                });

            modelBuilder.Entity("HomeEnvironmentLifePlanner.Shared.Models.Product", b =>
                {
                    b.Navigation("ProductPrices");
                });

            modelBuilder.Entity("HomeEnvironmentLifePlanner.Shared.Models.ProductGroup", b =>
                {
                    b.Navigation("PrG_Children");
                });

            modelBuilder.Entity("HomeEnvironmentLifePlanner.Shared.Models.ShoppingListHeader", b =>
                {
                    b.Navigation("ShoppingListPositions");
                });

            modelBuilder.Entity("HomeEnvironmentLifePlanner.Shared.Models.TransactionHeader", b =>
                {
                    b.Navigation("TransactionPositions");
                });
#pragma warning restore 612, 618
        }
    }
}
