@page "/bankStatementHeader"
@inject HttpClient client
@inject IJSRuntime js
@using HomeEnvironmentLifePlanner.Shared.Models
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@inject NavigationManager navigatorManager
@inject NotificationService NotificationService
@inject DialogService DialogService

<h2><RadzenIcon Icon="receipt_long" />Wyciągi</h2>

<br>
@if (bankStatementHeaders == null)
{
    <text>@Properties.Dictionary.sharedLoading</text>
}
else if (bankStatementHeaders.Count() == 0)
{
    <RadzenUpload Url="api/BankStatementHeader/Create" Style="margin-bottom: 20px;"
                  Progress=@(args => OnProgress(args, "Single file upload")) Accept=".xlsx,.xls" ChooseText="Wgraj wyciąg">
    </RadzenUpload>
    <text>@Properties.Dictionary.sharedNoRecords</text>

}
else
{
    <RadzenGrid @ref="bshGrid" Data="@bankStatementHeaders" AllowFiltering="true" AllowPaging="true" AllowSorting="true" TItem="BankStatementHeader" RowSelect="@(args => BSHRowSelectionChanged(args))" Value="@bankStatementHeader" PageSize="3">
        <Columns>
            <RadzenGridColumn TItem="BankStatementHeader" Property="BsH_Id" Title="ID" Width="80px" />
            <RadzenGridColumn TItem="BankStatementHeader" Property="BsH_Name" Title="Nazwa wyciągu" />
            <RadzenGridColumn TItem="BankStatementHeader" Property="BsH_CreateDate" Title="Data wczytania wyciagu:" Format="date" />
            <RadzenGridColumn TItem="BankStatementHeader" Property="BsH_DateFrom" Title="Przelew od:">
                <Template Context="bsh">
                    @String.Format("{0:d}", bsh.BsH_DateFrom)
                </Template>
            </RadzenGridColumn>
            <RadzenGridColumn TItem="BankStatementHeader" Property="BsH_DateTo" Title="Przelew do:">
                <Template Context="bsh">
                    @String.Format("{0:d}", bsh.BsH_DateTo)
                </Template>
            </RadzenGridColumn>
            <RadzenGridColumn TItem="BankStatementHeader" Context="bankStatementHeader" Title="Akcje" Width="160px">
                <Template Context="bankStatementHeader">
                    <RadzenButton style="margin: 0 1rem 1rem 0" ButtonType="ButtonType.Button" ButtonStyle="ButtonStyle.Danger" Click="@(contractorId => Delete(bankStatementHeader.BsH_Id) )" Icon="delete" />
                    <RadzenButton style="margin: 0 1rem 1rem 0" ButtonType="ButtonType.Button" ButtonStyle="ButtonStyle.Danger" Click="@(bsh => RefillEmptyRecommendedContractor(bankStatementHeader) )" Icon="shuffle" />
                </Template>
            </RadzenGridColumn>
        </Columns>
    </RadzenGrid>
    <RadzenUpload Url="api/BankStatementHeader/Create" Style="margin-bottom: 20px;" Progress=@(args => OnProgress(args, "Single file upload")) Accept=".xlsx,.xls" ChooseText="Wgraj wyciąg" />
    <RadzenLabel Text="@(bankStatementPosition==null?"": bankStatementPosition.BsP_Id.ToString())" Style="color:red" />

    <RadzenGrid @ref="bspGrid" Data="@bankStatementHeader.BankStatementPositions" AllowFiltering="true" AllowPaging="true" AllowSorting="true" TItem="BankStatementPosition" PageSize="100" ExpandMode="DataGridExpandMode.Single" Value="@bankStatementPosition" RowExpand="@(args => BSPRowExpand(args))" RowCollapse="@(args => BSPRowCollapse(args))">
        <Template Context="bsp">

           
                <div class="col-md-10">
                    <RadzenLabel Text="@sumWarningText" Style="color:red" Visible="@sumWarning" />
                </div>
            

            <RadzenGrid @ref="bssGrid" Data="@bankStatementSubPositions" TItem="BankStatementSubPosition" Style="width:30%;margin-left:14px" RowUpdate="@(args => OnUpdateRow(args))">
                <Columns>
                    <RadzenGridColumn TItem="BankStatementSubPosition" Property="BsS_Amount" Title="Kwota" Width="200px">
                        <Template Context="bss">
                            <RadzenNumeric style="width: 100%;" @bind-Value="@bss.BsS_Amount" Name="bssAmount" TValue="decimal" Change="args => OnUpdateRow(bss)" />
                        </Template>
                    </RadzenGridColumn>
                    <RadzenGridColumn TItem="BankStatementSubPosition" Property="BsS_CATID" Title="Kategoria">
                        <Template Context="bss">
                            <RadzenDropDown AllowClear="false" style="width: 100%;" TValue="int?"
                                            FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" FilterOperator="StringFilterOperator.StartsWith" AllowFiltering="true"
                                            Data=@categories TextProperty="CaT_Name" ValueProperty="CaT_Id" @bind-Value="@bss.BsS_CATID" Change="args => BSSChange(bss)" />
                        </Template>
                    </RadzenGridColumn>
                </Columns>
            </RadzenGrid>
            <RadzenButton style="margin: 0 1rem 1rem 0" ButtonType="ButtonType.Button" ButtonStyle="ButtonStyle.Primary" Click="@(x=>InsertRow())" Icon="format_list_bulleted" />
        </Template>
        <Columns>
            <RadzenGridColumn TItem="BankStatementPosition" Property="BsP_Amount" Title="Kwota" Width="80px" />
            <RadzenGridColumn TItem="BankStatementPosition" Property="BsP_Description" Title="Opis">
                <Template Context="bsp">
                    <p style="white-space:pre-wrap">@bsp.BsP_Description</p>
                </Template>
            </RadzenGridColumn>
            <RadzenGridColumn TItem="BankStatementPosition" Property="BsP_IsImported" Title="Zaimportowany" Width="80px">
                <Template Context="bsp">
                    <RadzenCheckBox TValue="bool" Value="bsp.BsP_IsImported" Disabled="true" />
                </Template>
            </RadzenGridColumn>
            <RadzenGridColumn TItem="BankStatementPosition" Property="BsP_SenderReceiver" Title="Nadawca/odbiorca" Width="200px">
                <Template Context="bsp">
                    <p style="white-space:pre-wrap">@bsp.BsP_SenderReceiver</p>
                </Template>
            </RadzenGridColumn>
            <RadzenGridColumn TItem="BankStatementPosition" Property="BsP_ExecutionDate" Title="Czas realizacji" Width="130px">
                <Template Context="bsp">
                    @String.Format("{0:d}", bsp.BsP_ExecutionDate)
                </Template>
            </RadzenGridColumn>
            <RadzenGridColumn TItem="BankStatementPosition" Property="BsP_RecommendedContractorId" Title="Kontrahent proponowany" Width="200px">
                <Template Context="bsp">
                    <RadzenDropDown AllowClear="false" style="width: 100%;" TValue="int?"
                                    FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" FilterOperator="StringFilterOperator.StartsWith" AllowFiltering="true"
                                    Data=@contractors TextProperty="CtR_Acronym" ValueProperty="CtR_Id" @bind-Value="@bsp.BsP_RecommendedContractorId" Change="args => BSPChangeContractor(bsp,bsp.BsP_RecommendedContractorId)" />
                </Template>
            </RadzenGridColumn>
            <RadzenGridColumn TItem="BankStatementPosition" Property="BsP_RecommendedAccountId" Title="Konto proponowane" Width="200px">
                <Template Context="bsp">
                    <RadzenDropDown AllowClear="false" style="width: 100%;" TValue="int?"
                                    FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" FilterOperator="StringFilterOperator.StartsWith" AllowFiltering="true"
                                    Data=@accounts TextProperty="AcC_Name" ValueProperty="AcC_Id" @bind-Value="@bsp.BsP_RecommendedAccountId" Change="args => BSPChangeAccount(bsp,bsp.BsP_RecommendedAccountId)" />
                </Template>
            </RadzenGridColumn>
            <RadzenGridColumn TItem="BankStatementPosition" Property="BankStatementSubPosition.BsS_CATID" Title="Kategoria" Width="200px">
                <Template Context="bss">
                    @if (bss.BankStatementSubPositions.Count() <= 1)
                    {
                        <RadzenDropDown AllowClear="false" style="width: 100%;" TValue="int?"
                                        FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" FilterOperator="StringFilterOperator.StartsWith" AllowFiltering="true"
                                        Data=@categories TextProperty="CaT_Name" ValueProperty="CaT_Id" @bind-Value="@bss.BankStatementSubPositions.FirstOrDefault().BsS_CATID" Change="args => BSSChange(bss.BankStatementSubPositions.FirstOrDefault())" />
                    }
                    else
                    {
                        <RadzenLabel Text="Wiecej niż jedno" />
                    }
                </Template>
            </RadzenGridColumn>

        </Columns>
    </RadzenGrid>
}
@code {
    BankStatementHeader bankStatementHeader = null;
    BankStatementPosition bankStatementPosition;
    IEnumerable<BankStatementSubPosition> bankStatementSubPositions { get; set; }
    bool sumWarning = false;
    string sumWarningText = "";
    IEnumerable<BankStatementHeader> bankStatementHeaders { get; set; }
    IEnumerable<Contractor> contractors;
    IEnumerable<Category> categories;
    IEnumerable<Account> accounts;
    RadzenUpload upload;
    RadzenGrid<BankStatementPosition> bspGrid;
    RadzenGrid<BankStatementSubPosition> bssGrid;
    RadzenGrid<BankStatementHeader> bshGrid;
    protected override async Task OnInitializedAsync()
    {
        try
        {
            contractors = await client.GetFromJsonAsync<IEnumerable<Contractor>>("api/contractor");
            categories = await client.GetFromJsonAsync<IEnumerable<Category>>("api/category");
            accounts = await client.GetFromJsonAsync<IEnumerable<Account>>("api/account");
            bankStatementHeaders = await client.GetFromJsonAsync<IEnumerable<BankStatementHeader>>("api/bankStatementHeader");
            bankStatementHeaders = bankStatementHeaders.OrderByDescending(x => x.BsH_Id);
            if (bankStatementHeader == null)
                bankStatementHeader = bankStatementHeaders.FirstOrDefault();
        }
        catch (AccessTokenNotAvailableException exception)
        {
            exception.Redirect();
        }
    }
    async Task RefillEmptyRecommendedContractor(BankStatementHeader bsh)
    {
        try
        {
            await client.PutAsJsonAsync("api/bankStatementHeader", bsh);
        }
        catch (Exception ex)
        {
            NotificationService.Notify(new NotificationMessage { Severity = NotificationSeverity.Error, Summary = "Błąd!", Detail = ex.ToString(), Duration = 4000 });
        }
        this.StateHasChanged();
        await OnInitializedAsync();
    }
    async Task Delete(int? bankStatementHeaderId)
    {
        var bsh = bankStatementHeaders.First(x => x.BsH_Id == bankStatementHeaderId);
        if (await js.InvokeAsync<bool>("confirm", $"{HomeEnvironmentLifePlanner.Client.Properties.Dictionary.sharedDeleteConfimation} {bsh.BsH_Name}'s ({bsh.BsH_Id})?"))
        {
            await client.DeleteAsync($"api/bankStatementHeader/{bankStatementHeaderId}");
            NotificationService.Notify(new NotificationMessage { Severity = NotificationSeverity.Success, Summary = "", Detail = Properties.Dictionary.sharedDeleteOk, Duration = 4000 });
            bankStatementHeaders = null;
            this.StateHasChanged();
            await OnInitializedAsync();
        }
    }
    protected async Task RefreshData()
    {
        contractors = await client.GetFromJsonAsync<IEnumerable<Contractor>>("api/contractor");
        categories = await client.GetFromJsonAsync<IEnumerable<Category>>("api/category");
        bankStatementHeaders = await client.GetFromJsonAsync<IEnumerable<BankStatementHeader>>("api/bankStatementHeader");
        bankStatementHeaders = bankStatementHeaders.OrderByDescending(x => x.BsH_Id);
        if (bankStatementHeader == null)
            bankStatementHeader = bankStatementHeaders.FirstOrDefault();
    }
    void OnProgress(UploadProgressArgs args, string name)
    {
        if (args.Progress == 100)
        {


        }
    }
    void BSHRowSelectionChanged(BankStatementHeader bsh)
    {
        bankStatementHeader = bsh;
        bankStatementPosition = null;
        bspGrid.ExpandRow(null);
        this.StateHasChanged();
    }
    //protected async Task OnChange(BankStatementPosition bsp, int? recommendedContractorId)
    //{
    //    await client.PutAsJsonAsync($"api/bankStatementPosition/setCtR/{recommendedContractorId}", bsp);
    //}
    protected async Task BSSChange(BankStatementSubPosition bss)
    {
        await client.PutAsJsonAsync($"api/bankStatementSuBPosition", bss);
    }
    protected async Task BSPChangeContractor(BankStatementPosition bsp, int? recommendedContractorId)
    {
        await client.PutAsJsonAsync($"api/bankStatementPosition/setCtR/{recommendedContractorId}", bsp);
        CheckAmountSum();
    }
    protected async Task BSPChangeAccount(BankStatementPosition bsp, int? recommendedAccountId)
    {
        await client.PutAsJsonAsync($"api/bankStatementPosition/setAcC/{recommendedAccountId}", bsp);
        CheckAmountSum();

    }
    //void InsertRow(int bspid)
    //{
    //    BankStatementSubPosition bss = new BankStatementSubPosition() { BsS_Amount = 0, BsS_CATID = 1, BsS_BSPID = bspid };
    //    bssGrid.InsertRow(bss);
    //    client.PostAsJsonAsync("api/bankStatementSubPosition", bss);
    //}
    async Task InsertRow()
    {

        BankStatementSubPosition bss = new BankStatementSubPosition() { BsS_Amount = 0, BsS_CATID = 1, BsS_BSPID = bankStatementPosition.BsP_Id };
        await client.PostAsJsonAsync("api/bankStatementSubPosition", bss);

        bankStatementSubPositions = null;
        bankStatementSubPositions = await client.GetFromJsonAsync<IEnumerable<BankStatementSubPosition>>(@$"api/bankStatementSubPosition/parent/{bankStatementPosition.BsP_Id}");
        CheckAmountSum();
        this.StateHasChanged();
    }
    protected async Task BSPRowExpand(BankStatementPosition bsp)
    {
        bankStatementPosition = bsp;
        bankStatementSubPositions = null;
        bankStatementSubPositions = await client.GetFromJsonAsync<IEnumerable<BankStatementSubPosition>>(@$"api/bankStatementSubPosition/parent/{bankStatementPosition.BsP_Id}");
        CheckAmountSum();
        this.StateHasChanged();
    }
    void BSPRowCollapse(BankStatementPosition bsp)
    {
        bankStatementPosition = null;
        bankStatementSubPositions = null;
        this.StateHasChanged();
    }
    async Task OnUpdateRow(BankStatementSubPosition bss)
    {
        await client.PutAsJsonAsync("api/bankStatementSubPosition", bss);
        bankStatementSubPositions = null;
        bankStatementSubPositions = await client.GetFromJsonAsync<IEnumerable<BankStatementSubPosition>>(@$"api/bankStatementSubPosition/parent/{bankStatementPosition.BsP_Id}");
        CheckAmountSum();
        this.StateHasChanged();
    }
    void CheckAmountSum()
    {
        sumWarningText = $"Suma elementów musi być równa {bankStatementPosition.BsP_Amount.ToString()} (aktualnie: {bankStatementSubPositions.Sum(x => x.BsS_Amount).ToString()}) ";
        if (bankStatementSubPositions.Sum(x => x.BsS_Amount) == bankStatementPosition.BsP_Amount)
        {
            sumWarning = false;
        }
        else
        {
            sumWarning = true;
        }
    }
}