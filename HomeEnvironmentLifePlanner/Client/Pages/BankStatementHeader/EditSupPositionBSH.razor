@page "/bankStatementHeader/editSupPosition/{parentId:int}"
@inject HttpClient client
@inject IJSRuntime js
@using HomeEnvironmentLifePlanner.Shared.Models
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@inject NavigationManager navigatorManager
@inject NotificationService NotificationService
@*@if (bankStatmentSubPositions == null)
    {
        <text>@Properties.Dictionary.sharedLoading</text>
    }
    else
    {*@
<div class="row">
    <div class="col-md-2">
        <RadzenButton Icon="add_box" style="margin-bottom: 10px" Click="@(x=>InsertRow() )" />
    </div>
    <div class="col-md-10">
        @if (sumWarning)
        {
            <RadzenLabel Text="@sumWarningText" Style="color:red" />
        }
    </div>

</div>
    <div class="row">
        <div class="col-md-12">


            <RadzenGrid @ref="bspGrid" Data="@bankStatementSubPositions" AllowFiltering="true" AllowPaging="true" AllowSorting="true" TItem="BankStatementSubPosition" PageSize="100" Style="white-space: pre-wrap"
                        RowUpdate="@(args => OnUpdateRow(args))">
                <Columns>
                    <RadzenGridColumn TItem="BankStatementSubPosition" Property="BsS_Amount" Title="Kwota" Width="200px">
                        <Template Context="bss">
                            <RadzenNumeric style="width: 100%;" @bind-Value="@bss.BsS_Amount" Name="bssAmount" TValue="decimal" Change="args => OnChange(bss)" />

                        </Template>
                    </RadzenGridColumn>

                    <RadzenGridColumn TItem="BankStatementSubPosition" Property="BsS_CATID" Title="Kategoria" Width="300px">
                        <Template Context="bss">
                            <RadzenDropDown AllowClear="false" style="width: 100%;" TValue="int?"
                                            FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" FilterOperator="StringFilterOperator.StartsWith" AllowFiltering="true"
                                            Data=@categories TextProperty="CaT_Name" ValueProperty="CaT_Id" @bind-Value="@bss.BsS_CATID" Change="args => OnChange(bss)" />
                        </Template>
                    </RadzenGridColumn>
                    <RadzenGridColumn TItem="BankStatementSubPosition" Context="bss" Title="Akcje" Width="80px">
                        <Template Context="bss">
                            <RadzenButton style="margin: 0 1rem 1rem 0" ButtonType="ButtonType.Button" ButtonStyle="ButtonStyle.Danger" Click="@(accountId=>Delete(bss.BsS_Id) )" Icon="delete" />
                        </Template>
                    </RadzenGridColumn>
                </Columns>
            </RadzenGrid>

        </div>
    </div>

    @code {
        RadzenGrid<BankStatementSubPosition> bspGrid;

        BankStatementSubPosition bankStatementSubPosition;
        IEnumerable<BankStatementSubPosition> bankStatementSubPositions { get; set; }
        IEnumerable<Category> categories;
        bool sumWarning = false;
        string sumWarningText = "";
        [Parameter] public int parentId { get; set; }
        [Parameter] public decimal parentAmount { get; set; }
        protected override async Task OnInitializedAsync()
        {
            try
            {

                categories = await client.GetFromJsonAsync<IEnumerable<Category>>("api/category");
                bankStatementSubPositions = await client.GetFromJsonAsync<IEnumerable<BankStatementSubPosition>>(@$"api/bankStatementSubPosition/parent/{parentId}");
                bankStatementSubPosition = bankStatementSubPositions.FirstOrDefault();

                CheckAmountSum();

            }
            catch (AccessTokenNotAvailableException exception)
            {
                exception.Redirect();
            }
        }

        protected async Task OnChange(BankStatementSubPosition bss)
        {
            await client.PutAsJsonAsync($"api/bankStatementSubPosition", bss);
            CheckAmountSum();

        }
        async Task Delete(int bssId)
        {
            var bss = bankStatementSubPositions.First(x => x.BsS_Id == bssId);
            if (await js.InvokeAsync<bool>("confirm", $"{HomeEnvironmentLifePlanner.Client.Properties.Dictionary.sharedDeleteConfimation}  ({bss.BsS_Id})?"))
            {
                await client.DeleteAsync($"api/bankStatementSubPosition/{bssId}");
                CheckAmountSum();

                await OnInitializedAsync();
            }
        }

        protected async void InsertRow()
        {
            BankStatementSubPosition bss = new BankStatementSubPosition() { BsS_Amount = 0, BsS_CATID = 1, BsS_BSPID = parentId };
            await client.PostAsJsonAsync("api/bankStatementSubPosition", bss);
            bankStatementSubPositions = await client.GetFromJsonAsync<IEnumerable<BankStatementSubPosition>>(@$"api/bankStatementSubPosition/parent/{parentId}");

            CheckAmountSum();

            await InvokeAsync(() => { StateHasChanged(); });
            //    bspGrid.InsertRow(bss);
        }
        async Task OnUpdateRow(BankStatementSubPosition bss)
        {
            await client.PutAsJsonAsync("api/bankStatmentSubPosition", bss);
        }
        void CheckAmountSum()
        {
            sumWarningText = $"Suma elementów musi być równa {parentAmount.ToString()} (aktualnie: {bankStatementSubPositions.Sum(x => x.BsS_Amount).ToString()}) ";
            if (bankStatementSubPositions.Sum(x => x.BsS_Amount) == parentAmount)
                sumWarning = false;
            else
                sumWarning = true;

        }

    }
