@page "/paymentType"
@inject HttpClient client
@inject IJSRuntime js
@using HomeEnvironmentLifePlanner.Shared.Models
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@inject NavigationManager navigatorManager

<h2><RadzenIcon Icon="payments" /> Formy płatności</h2>
<RadzenButton style="margin: 0 1rem 1rem 0" ButtonType="ButtonType.Button" ButtonStyle="ButtonStyle.Primary" Click="@(x=> navigatorManager.NavigateTo($"paymentType/create"))" Icon="add_box" />
<br>

@if (paymentTypes == null)
{
    <text>@HomeEnvironmentLifePlanner.Client.Properties.Dictionary.sharedLoading</text>
}
else if (paymentTypes.Length == 0)
{
    <text>@HomeEnvironmentLifePlanner.Client.Properties.Dictionary.sharedNoRecords </text>
}
else
{  
    <RadzenGrid Data="@paymentTypes" AllowFiltering="true" AllowPaging="true" AllowSorting="true" TItem="PaymentType" ColumnWidth="200px">
        <Columns>
            <RadzenGridColumn TItem="PaymentType" Property="PyT_Id" Title="ID" />
            <RadzenGridColumn TItem="PaymentType" Property="PyT_Name" Title="Nazwa formy płatności" />
            <RadzenGridColumn TItem="PaymentType" Property="PyT_ReferenceNumber" Title="Numer referencyjny" />
            <RadzenGridColumn TItem="PaymentType" Property="Account.AcC_Name" Title="Przypisane konto" />
            <RadzenGridColumn TItem="PaymentType" Context="paymentType" Title="Akcje">
                <Template Context="paymentType">
                    <RadzenButton style="margin: 0 1rem 1rem 0" ButtonType="ButtonType.Button" ButtonStyle="ButtonStyle.Primary" Click="@(x=> navigatorManager.NavigateTo($"paymentType/edit/{paymentType.PyT_Id}"))" Icon="create" />
                    <RadzenButton style="margin: 0 1rem 1rem 0" ButtonType="ButtonType.Button" ButtonStyle="ButtonStyle.Danger" Click="@(paymentTypeId=>Delete(paymentType.PyT_Id) )" Icon="delete" />
                </Template>
            </RadzenGridColumn>
        </Columns>
    </RadzenGrid>
}
@code {
    PaymentType[] paymentTypes { get; set; }
    Account[] accounts { get; set; }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            paymentTypes = await client.GetFromJsonAsync<PaymentType[]>("api/paymentType");
            accounts = await client.GetFromJsonAsync<Account[]>("api/account");
        }
        catch (AccessTokenNotAvailableException exception)
        {
            exception.Redirect();
        }

    }
    async Task Delete(int paymentTypeId)
    {
        var pyt = paymentTypes.First(x => x.PyT_Id == paymentTypeId);
        if (await js.InvokeAsync<bool>("confirm", $"{HomeEnvironmentLifePlanner.Client.Properties.Dictionary.sharedDeleteConfimation} {pyt.PyT_Name}'s ({pyt.PyT_Id})?"))
        {
            await client.DeleteAsync($"api/paymentType/{paymentTypeId}");
            await OnInitializedAsync();
        }
    }
}