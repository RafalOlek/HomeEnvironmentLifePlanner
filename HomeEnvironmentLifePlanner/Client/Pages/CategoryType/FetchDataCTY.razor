@page "/categoryType"
@inject HttpClient client
@inject IJSRuntime js
@using HomeEnvironmentLifePlanner.Shared.Models
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@inject NavigationManager navigatorManager


<h2><RadzenIcon Icon="dashboard" /> Typy Kategorii</h2>
<RadzenButton style="margin: 0 1rem 1rem 0" ButtonType="ButtonType.Button" ButtonStyle="ButtonStyle.Primary" Click="@(x=> navigatorManager.NavigateTo($"categoryType/create"))" Icon="add_box" />
<br>
@if (categoryTypes == null)
{
    <text>@HomeEnvironmentLifePlanner.Client.Properties.Dictionary.sharedLoading</text>
}
else if (categoryTypes.Length == 0)
{
    <text>@HomeEnvironmentLifePlanner.Client.Properties.Dictionary.sharedNoRecords</text>
}
else
{

    <RadzenGrid Data="@categoryTypes"
                AllowFiltering="true" AllowPaging="true" AllowSorting="true" TItem="CategoryType" ColumnWidth="200px">
        <Columns>
            <RadzenGridColumn TItem="CategoryType" Property="CtY_Id" Title="ID" />
            <RadzenGridColumn TItem="CategoryType" Property="CtY_Name" Title="Nazwa typu kategorii" />
            <RadzenGridColumn TItem="CategoryType" Property="CtY_Value"  Title="Wartość kategorii" />
            <RadzenGridColumn TItem="CategoryType" Context="categoryType" Title="Akcje">
                <Template Context="categoryType">
                    <RadzenButton style="margin: 0 1rem 1rem 0" ButtonType="ButtonType.Button" ButtonStyle="ButtonStyle.Primary" Click="@(x=> navigatorManager.NavigateTo($"categoryType/edit/{categoryType.CtY_Id}"))" Icon="create" />
                    <RadzenButton style="margin: 0 1rem 1rem 0" ButtonType="ButtonType.Button" ButtonStyle="ButtonStyle.Danger" Click="@(accountId=>Delete(categoryType.CtY_Id) )" Icon="delete" />
                </Template>
            </RadzenGridColumn>
        </Columns>
    </RadzenGrid>
}
@code {
    CategoryType[] categoryTypes { get; set; }
    Category[] categories { get; set; }
    protected override async Task OnInitializedAsync()
    {

        try
        {
            categoryTypes = await client.GetFromJsonAsync<CategoryType[]>("api/categoryType");
            categories = await client.GetFromJsonAsync<Category[]>("api/category");
        }
        catch (AccessTokenNotAvailableException exception)
        {
            exception.Redirect();
        }
    }
    async Task Delete(int categoryTypeId)
    {
        var cty = categoryTypes.First(x => x.CtY_Id == categoryTypeId);
        if (categories.Where(x => x.CaT_CTYID == categoryTypeId).Any())
        {
            await js.InvokeVoidAsync("alert", "Nie można usunąć typu - istnieje kategoria z tym typem!");

        }
        else
        {
            if (await js.InvokeAsync<bool>("confirm", $"{HomeEnvironmentLifePlanner.Client.Properties.Dictionary.sharedDeleteConfimation} {cty.CtY_Name}'s ({cty.CtY_Id})?"))
            {
                await client.DeleteAsync($"api/categoryType/{categoryTypeId}");
                await OnInitializedAsync();
            }
        }
    }
}