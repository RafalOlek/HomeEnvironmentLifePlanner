@page "/contractorGroup"
@inject HttpClient client
@inject IJSRuntime js
@using HomeEnvironmentLifePlanner.Shared.Models
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@inject NavigationManager navigatorManager
@inject NotificationService NotificationService

<h2><RadzenIcon Icon="people" /> Grupy Kontrahentów</h2>

@if (contractorGroups == null)
{
    <text>@HomeEnvironmentLifePlanner.Client.Properties.Dictionary.sharedLoading</text>
}
else if (contractorGroups.Count() == 0)
{
    <text>@HomeEnvironmentLifePlanner.Client.Properties.Dictionary.sharedNoRecords</text>
}
else
{
    <RadzenCard Style="height:100%">
        <div class="row">
            <div class="col-md-6">
                <RadzenTree Change=@OnChange Data=@contractorGroups.Where(x=>x.CtG_ParentId==null) Expand=@OnLoad Style="width: 100%;">
                    <RadzenTreeLevel TextProperty="CtG_Name" Expanded="(x) =>true" />
                </RadzenTree>
            </div>
            <div class="col-md-6">
                <RadzenCard>
                    <div style="margin-top:20px">Nazwa grupy kontrahentów: <b>@contractorGroups.Where(x => x.CtG_Id == ctgParentId).FirstOrDefault().CtG_Name</b></div>
                    <div>ID:<b>@contractorGroups.Where(x => x.CtG_Id == ctgParentId).FirstOrDefault().CtG_Id</b></div>
                    <br />
                    <div>
                        <RadzenButton style="margin: 0 1rem 1rem 0" ButtonType="ButtonType.Button" ButtonStyle="ButtonStyle.Primary" Click="@(x=> navigatorManager.NavigateTo($"contractorGroup/edit/{ctgParentId}"))" Icon="create" />
                        <RadzenButton style="margin: 0 1rem 1rem 0" ButtonType="ButtonType.Button" ButtonStyle="ButtonStyle.Danger" Click="@(accountId=>Delete(ctgParentId) )" Icon="delete" />
                        <RadzenButton style="margin: 0 1rem 1rem 0" ButtonType="ButtonType.Button" ButtonStyle="ButtonStyle.Primary" Click="@(x=> navigatorManager.NavigateTo($"contractorGroup/create/{ctgParentId}"))" Icon="add_box" />
                    </div>
                </RadzenCard>
            </div>
        </div>
    </RadzenCard>

}
@code {
        IEnumerable<ContractorGroup> contractorGroups { get; set; }
        int? ctgParentId = 1;
    protected override async Task OnInitializedAsync()
    {
        try
        {
            ctgParentId = 1;
            contractorGroups = await client.GetFromJsonAsync<ContractorGroup[]>("api/contractorGroup");
        }
        catch (AccessTokenNotAvailableException exception)
        {
            exception.Redirect();
        }
    }

    async Task Delete(int? contractorGroupId)
    {
        var ctg = contractorGroups.First(x => x.CtG_Id == contractorGroupId);
        if (await js.InvokeAsync<bool>("confirm", $"{HomeEnvironmentLifePlanner.Client.Properties.Dictionary.sharedDeleteConfimation} {ctg.CtG_Name}'s ({ctg.CtG_Id})?"))
        {
            if (contractorGroups.Where(x => x.CtG_ParentId == contractorGroupId).Any())
                NotificationService.Notify(new NotificationMessage { Severity = NotificationSeverity.Error, Summary = "Błąd!", Detail = Properties.Dictionary.sharedDeleteExistsChild, Duration = 4000 });
            else if (contractorGroupId == 1)
                NotificationService.Notify(new NotificationMessage { Severity = NotificationSeverity.Error, Summary = "Błąd!", Detail = Properties.Dictionary.sharedDeleteHeadParent, Duration = 4000 });
            else
            {
                await client.DeleteAsync($"api/contractorGroup/{contractorGroupId}");
                NotificationService.Notify(new NotificationMessage { Severity = NotificationSeverity.Success, Summary = "", Detail = Properties.Dictionary.sharedDeleteOk, Duration = 4000 });
                contractorGroups = null;
                this.StateHasChanged();
                await OnInitializedAsync();
            }
        }
    }
    void OnChange(TreeEventArgs args)
    {
        if (args.Value is ContractorGroup contractorGroupx)
        {
            ctgParentId = contractorGroupx.CtG_Id;
        }
    }
    void OnLoad(TreeExpandEventArgs args)
    {
        var contractorGroup = args.Value as ContractorGroup;

        args.Children.Data = contractorGroups.Where(x => x.CtG_ParentId == contractorGroup.CtG_Id);
        args.Children.TextProperty = "CtG_Name";
        args.Children.HasChildren = (x) => (contractorGroups.Where(x => x.CtG_ParentId == contractorGroup.CtG_Id).Any()) ? true : false;
    }

}