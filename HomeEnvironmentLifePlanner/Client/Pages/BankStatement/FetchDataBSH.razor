@page "/bankStatement"
@inject HttpClient client
@inject IJSRuntime js
@using HomeEnvironmentLifePlanner.Shared.Models
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@inject NavigationManager navigatorManager
@inject NotificationService NotificationService
@inject DialogService DialogService

<h2><RadzenIcon Icon="receipt_long" />Wyciągi</h2>
<br>
@if (bankStatementHeaders == null)
{
    <text>@Properties.Dictionary.sharedLoading</text>
}
else if (bankStatementHeaders.Count() == 0)
{
    <RadzenUpload Url="api/bankStatement/header/import" Style="margin-bottom: 20px;" Accept=".xlsx,.xls" ChooseText="Wgraj wyciąg" />
    <text>@Properties.Dictionary.sharedNoRecords</text>
}
else
{
    <RadzenGrid @ref="bshGrid" Data="@bankStatementHeaders" AllowFiltering="true" AllowPaging="true" AllowSorting="true" TItem="BankStatementHeader" RowSelect="@(args => BSHRowSelectionChanged(args))" Value="@bankStatementHeader" PageSize="3">
        <Columns>

            <RadzenGridColumn TItem="BankStatementHeader" Property="BsH_Id" Title="ID" Width="80px" />
            <RadzenGridColumn TItem="BankStatementHeader" Property="BsH_Name" Title="Nazwa wyciągu" />
            <RadzenGridColumn TItem="BankStatementHeader" Property="BsH_CreateDate" Title="Data wczytania wyciagu:" Format="date" />
            <RadzenGridColumn TItem="BankStatementHeader" Property="BsH_DateFrom" Title="Przelew od:">
                <Template Context="bsh">
                    @String.Format("{0:d}", bsh.BsH_DateFrom)
                </Template>
            </RadzenGridColumn>
            <RadzenGridColumn TItem="BankStatementHeader" Property="BsH_DateTo" Title="Przelew do:">
                <Template Context="bsh">
                    @String.Format("{0:d}", bsh.BsH_DateTo)
                </Template>
            </RadzenGridColumn>
            <RadzenGridColumn TItem="BankStatementHeader" Context="bankStatementHeader" Title="Akcje" Width="240px">
                <Template Context="bankStatementHeader">
                    <RadzenButton style="margin: 0 1rem 1rem 0" ButtonType="ButtonType.Button" ButtonStyle="ButtonStyle.Danger" Click="@(contractorId => BSHDelete(bankStatementHeader.BsH_Id) )" Icon="delete" />
                    <RadzenButton style="margin: 0 1rem 1rem 0" ButtonType="ButtonType.Button" ButtonStyle="ButtonStyle.Danger" Click="@(bsh => BSHRefillEmptyRecommendedContractor(bankStatementHeader) )" Icon="shuffle" />
                    <RadzenButton style="margin: 0 1rem 1rem 0" ButtonType="ButtonType.Button" ButtonStyle="ButtonStyle.Danger" Click="@(bsh => BSHRefillCategory(bankStatementHeader) )" Icon="shuffle" />
                    <RadzenButton style="margin: 0 1rem 1rem 0" ButtonType="ButtonType.Button" ButtonStyle="ButtonStyle.Danger" Click="@(bsh => BSHImportToTransactions(bankStatementHeader) )" Icon="shuffle" />
                </Template>
            </RadzenGridColumn>
        </Columns>
    </RadzenGrid>
    <RadzenUpload Url="api/bankStatement/header/import" Style="margin-bottom: 20px;" Accept=".xlsx,.xls" ChooseText="Wgraj wyciąg" />
    <RadzenLabel Text="@(bankStatementPosition==null?"": bankStatementPosition.BsP_Id.ToString())" Style="color:red" />
    <RadzenGrid @ref="bspGrid" Data="@bankStatementPositions" AllowFiltering="true" AllowPaging="true" AllowSorting="true" TItem="BankStatementPosition" PageSize="100" ExpandMode="DataGridExpandMode.Single" Value="@bankStatementPosition" RowExpand="@(args => BSPRowExpand(args))" RowCollapse="@(args => BSPRowCollapse(args))" RowUpdate="@(args => BSPChange(args))">
        <Template Context="bsp">
            <div class="col-md-10">
                <RadzenLabel Text="@sumWarningText" Style="color:red" Visible="@sumWarning" />
            </div>
            <RadzenGrid @ref="bssGrid" Data="@bankStatementSubPositions" TItem="BankStatementSubPosition" Style="width:35%;margin-left:14px" RowUpdate="@(args => BSSChange(args))">
                <Columns>
                    <RadzenGridColumn TItem="BankStatementSubPosition" Property="BsS_Amount" Title="Kwota" Width="200px">
                        <Template Context="bss">
                            <RadzenNumeric style="width: 100%;" @bind-Value="@bss.BsS_Amount" Name="bssAmount" TValue="decimal" Change="args => BSSChange(bss)" Disabled="@bankStatementPosition.BsP_IsImportedToTransactions" />
                        </Template>
                    </RadzenGridColumn>
                    <RadzenGridColumn TItem="BankStatementSubPosition" Property="BsS_CATID" Title="Kategoria">
                        <Template Context="bss">
                            <RadzenDropDown AllowClear="false" style="width: 100%;" TValue="int?" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" FilterOperator="StringFilterOperator.StartsWith" AllowFiltering="true" Data=@categories TextProperty="CaT_Name" ValueProperty="CaT_Id" @bind-Value="@bss.BsS_CATID" Change="args => BSSChange(bss)"  Disabled="@bankStatementPosition.BsP_IsImportedToTransactions" />
                        </Template>
                    </RadzenGridColumn>
                    <RadzenGridColumn TItem="BankStatementSubPosition" Context="bss" Title="Akcje" Width="80px">
                        <Template Context="bss">
                            <RadzenButton style="margin: 0 1rem 1rem 0" ButtonType="ButtonType.Button" ButtonStyle="ButtonStyle.Danger" Click="@(() => BSSDelete(bss.BsS_Id) )" Icon="delete" Disabled="@bankStatementPosition.BsP_IsImportedToTransactions"  />
                        </Template>
                    </RadzenGridColumn>
                </Columns>
            </RadzenGrid>
            <RadzenButton style="margin: 0 1rem 1rem 0" ButtonType="ButtonType.Button" ButtonStyle="ButtonStyle.Primary" Click="@(x=>BSSInsertRow())" Icon="format_list_bulleted"  Disabled="@bankStatementPosition.BsP_IsImportedToTransactions"/>
        </Template>
        <Columns>
            <RadzenGridColumn TItem="BankStatementPosition" Property="Bsp_IsPreparedToImport" Title="Przygotowany do zaimportowania" Width="80px">
                <Template Context="bsp">
                    <RadzenCheckBox @bind-Value=@bsp.Bsp_IsPreparedToImport TValue="bool" Change=@(args => BSPChange(bsp)) Disabled="@(bsp.BsP_IsImportedToTransactions)" />
                </Template>
            </RadzenGridColumn>
            <RadzenGridColumn TItem="BankStatementPosition" Property="BsP_Amount" Title="Kwota" Width="80px" />
            <RadzenGridColumn TItem="BankStatementPosition" Property="BsP_Description" Title="Opis">
                <Template Context="bsp">
                    <p style="white-space:pre-wrap">@bsp.BsP_Description</p>
                </Template>
            </RadzenGridColumn>
            <RadzenGridColumn TItem="BankStatementPosition" Property="BsP_IsImportedToTransactions" Title="Zaksięgowany" Width="80px">
                <Template Context="bsp">
                    <RadzenCheckBox TValue="bool" Value="bsp.BsP_IsImportedToTransactions" Disabled="true" />
                </Template>
            </RadzenGridColumn>
            <RadzenGridColumn TItem="BankStatementPosition" Property="BsP_SenderReceiver" Title="Nadawca/odbiorca" Width="200px">
                <Template Context="bsp">
                    <p style="white-space:pre-wrap">@bsp.BsP_SenderReceiver</p>
                </Template>
            </RadzenGridColumn>
            <RadzenGridColumn TItem="BankStatementPosition" Property="BsP_ExecutionDate" Title="Czas realizacji" Width="130px">
                <Template Context="bsp">
                    @String.Format("{0:d}", bsp.BsP_ExecutionDate)
                </Template>
            </RadzenGridColumn>
            <RadzenGridColumn TItem="BankStatementPosition" Property="BsP_RecommendedContractorId" Title="Kontrahent proponowany" Width="200px">
                <Template Context="bsp">
                    <RadzenDropDown AllowClear="false" style="width: 100%;" TValue="int?"
                                    FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" FilterOperator="StringFilterOperator.StartsWith" AllowFiltering="true" Data=@contractors TextProperty="CtR_Acronym" ValueProperty="CtR_Id" @bind-Value="@bsp.BsP_RecommendedContractorId" Change="args => BSPChange(bsp)" Disabled="@(bsp.BsP_IsImportedToTransactions)" />
                </Template>
            </RadzenGridColumn>
            <RadzenGridColumn TItem="BankStatementPosition" Property="BsP_RecommendedAccountId" Title="Konto proponowane" Width="200px">
                <Template Context="bsp">
                    <RadzenDropDown AllowClear="false" style="width: 100%;" TValue="int?" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" FilterOperator="StringFilterOperator.StartsWith" AllowFiltering="true" Data=@accounts TextProperty="AcC_Name" ValueProperty="AcC_Id" @bind-Value="@bsp.BsP_RecommendedAccountId" Change="args => BSPChange(bsp)" Disabled="@(bsp.BsP_IsImportedToTransactions)" />
                </Template>
            </RadzenGridColumn>
            <RadzenGridColumn TItem="BankStatementPosition" Property="BankStatementSubPosition.BsS_CATID" Title="Kategoria" Width="200px">
                <Template Context="bsp">
                    <RadzenLabel Text="@(categories.Where(x=>x.CaT_Id== bsp.BankStatementSubPositions.FirstOrDefault().BsS_CATID).FirstOrDefault().CaT_Name)" Visible="@(bsp.BankStatementSubPositions.Count() <= 1)"/>
                    <RadzenLabel Text="Wiecej niż jedna"  Visible="@(bsp.BankStatementSubPositions.Count() >1)" />
                </Template>
            </RadzenGridColumn>
            @*<RadzenGridColumn TItem="BankStatementPosition" Property="BankStatementSubPosition.BsS_CATID" Title="Kategoria" Width="200px" >
            <Template Context="bsp">
                @if (bsp.BankStatementSubPositions.Count() <= 1)
                {
                    <RadzenDropDown AllowClear="false" style="width: 100%;" TValue="int?" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" FilterOperator="StringFilterOperator.StartsWith" AllowFiltering="true" Data=@categories TextProperty="CaT_Name" ValueProperty="CaT_Id" @bind-Value="@bsp.BankStatementSubPositions.FirstOrDefault().BsS_CATID" Change="args => BSSChange(bsp.BankStatementSubPositions.FirstOrDefault())"  Disabled="@(bsp.BsP_IsImportedToTransactions)"/>
                }
                else
                {
                    <RadzenLabel Text="Wiecej niż jedno" />
                }
            </Template>
        </RadzenGridColumn>*@
        </Columns>
    </RadzenGrid>
}
@code {
    BankStatementHeader bankStatementHeader = null;
    BankStatementPosition bankStatementPosition;
    IEnumerable<BankStatementSubPosition> bankStatementSubPositions { get; set; }
    IEnumerable<BankStatementPosition> bankStatementPositions { get; set; }
    bool sumWarning = false;
    string sumWarningText = "";
    IEnumerable<BankStatementHeader> bankStatementHeaders { get; set; }
    IEnumerable<Contractor> contractors;
    IEnumerable<Category> categories;
    IEnumerable<Account> accounts;
    RadzenUpload upload;
    RadzenGrid<BankStatementPosition> bspGrid;
    RadzenGrid<BankStatementSubPosition> bssGrid;
    RadzenGrid<BankStatementHeader> bshGrid;
    protected override async Task OnInitializedAsync()
    {
        try
        {
            contractors = await client.GetFromJsonAsync<IEnumerable<Contractor>>("api/contractor/contractorList");
            categories = await client.GetFromJsonAsync<IEnumerable<Category>>("api/config/categoryList");
            accounts = await client.GetFromJsonAsync<IEnumerable<Account>>("api/config/accountList");
            bankStatementHeaders = await client.GetFromJsonAsync<IEnumerable<BankStatementHeader>>("api/bankStatement/headerList");
            bankStatementHeaders = bankStatementHeaders.OrderByDescending(x => x.BsH_Id);
            if (bankStatementHeader == null)
                bankStatementHeader = bankStatementHeaders.FirstOrDefault();
            if(bankStatementHeader !=null)
                bankStatementPositions= await client.GetFromJsonAsync<IEnumerable<BankStatementPosition>>($"api/bankStatement/header/getChildren/{bankStatementHeader.BsH_Id}");
        }
        catch (AccessTokenNotAvailableException exception)
        {
            exception.Redirect();
        }
    }
    async Task BSHRefillEmptyRecommendedContractor(BankStatementHeader bsh)
    {
        try
        {
            await client.PutAsJsonAsync("api/bankStatement/header/refillCTR", bsh);
        }
        catch (Exception ex)
        {
            NotificationService.Notify(new NotificationMessage { Severity = NotificationSeverity.Error, Summary = "Błąd!", Detail = ex.ToString(), Duration = 4000 });
        }
        this.StateHasChanged();
        await OnInitializedAsync();
    }
    async Task BSHRefillCategory(BankStatementHeader bsh)
    {
        try
        {
            await client.PutAsJsonAsync("api/bankStatement/header/refillCAT", bsh);
        }
        catch (Exception ex)
        {
            NotificationService.Notify(new NotificationMessage { Severity = NotificationSeverity.Error, Summary = "Błąd!", Detail = ex.ToString(), Duration = 4000 });
        }
        this.StateHasChanged();
        await OnInitializedAsync();
    }
    async Task BSHDelete(int? bankStatementHeaderId)
    {
        var bsh = bankStatementHeaders.First(x => x.BsH_Id == bankStatementHeaderId);
        if (await js.InvokeAsync<bool>("confirm", $"{HomeEnvironmentLifePlanner.Client.Properties.Dictionary.sharedDeleteConfimation} {bsh.BsH_Name}'s ({bsh.BsH_Id})?"))
        {
            await client.DeleteAsync($"api/bankStatement/header/{bankStatementHeaderId}");
            NotificationService.Notify(new NotificationMessage { Severity = NotificationSeverity.Success, Summary = "", Detail = Properties.Dictionary.sharedDeleteOk, Duration = 4000 });
            bankStatementHeaders = null;
            bankStatementPositions = null;
            this.StateHasChanged();
            await OnInitializedAsync();
        }
    }
    async Task BSHRowSelectionChanged(BankStatementHeader bsh)
    {
        bankStatementHeader = bsh;
        bankStatementPositions = await client.GetFromJsonAsync<IEnumerable<BankStatementPosition>>($"api/bankStatement/header/getChildren/{bankStatementHeader.BsH_Id}");
        bankStatementPosition = null;
        bspGrid.ExpandRow(null);
        this.StateHasChanged();
    }
    async Task BSHImportToTransactions(BankStatementHeader bsh)
    {
        if (await js.InvokeAsync<bool>("confirm", $"Czy na pewno chcesz zaksięgować przygotowane pozycje z wyciągu {bsh.BsH_Name}'s ({bsh.BsH_Id})?"))
        {

            var response = await client.PostAsJsonAsync($"api/transaction/ImportFromBSH", bsh);

            if (response.StatusCode != System.Net.HttpStatusCode.Created)
            {
                string msg = await response.Content.ReadAsStringAsync();
                NotificationService.Notify(new NotificationMessage { Severity = NotificationSeverity.Error, Summary = "", Detail = msg, Duration = 4000 });
            }
            else
            {
                NotificationService.Notify(new NotificationMessage { Severity = NotificationSeverity.Success, Summary = "", Detail = "Pomyślnie zaksiegowano wybrane pozycje", Duration = 4000 });
            }

            bankStatementPositions = await client.GetFromJsonAsync<IEnumerable<BankStatementPosition>>($"api/bankStatement/header/getChildren/{bsh.BsH_Id}");
            this.StateHasChanged();
        }
    }
    async Task BSPChange(BankStatementPosition bsp)
    {
        await client.PutAsJsonAsync($"api/bankStatement/position", bsp);
        this.StateHasChanged();

    }
    async Task BSPRowExpand(BankStatementPosition bsp)
    {
        bankStatementPosition = bsp;
        bankStatementSubPositions = null;
        bankStatementSubPositions = await client.GetFromJsonAsync<IEnumerable<BankStatementSubPosition>>(@$"api/bankStatement/position/getChildren/{bankStatementPosition.BsP_Id}");
        CheckAmountSum();
        this.StateHasChanged();
    }
    void BSPRowCollapse(BankStatementPosition bsp)
    {
        bankStatementPosition = null;
        bankStatementSubPositions = null;
        sumWarning = false;
        this.StateHasChanged();
    }
    async Task BSSInsertRow()
    {
        BankStatementSubPosition bss = new BankStatementSubPosition() { BsS_Amount = 0, BsS_CATID = 1, BsS_BSPID = bankStatementPosition.BsP_Id };
        await client.PostAsJsonAsync("api/bankStatement/subposition", bss);
        int bssCount = bankStatementSubPositions.Count();
        bankStatementSubPositions = null;
        bankStatementSubPositions = await client.GetFromJsonAsync<IEnumerable<BankStatementSubPosition>>(@$"api/bankStatement/position/getChildren/{bankStatementPosition.BsP_Id}");
        if (bssCount <= 1)
        {
            bankStatementPositions = await client.GetFromJsonAsync<IEnumerable<BankStatementPosition>>($"api/bankStatement/header/getChildren/{bankStatementHeader.BsH_Id}");
            await bspGrid.ExpandRow(bankStatementPositions.Where(x=>x.BsP_Id==bss.BsS_BSPID).FirstOrDefault());

        }
        CheckAmountSum();
        this.StateHasChanged();
    }
    async Task BSSChange(BankStatementSubPosition bss)
    {
        await client.PutAsJsonAsync($"api/bankStatement/subposition", bss);
        CheckAmountSum();
        this.StateHasChanged();
    }
    async Task BSSDelete(int? bankStatementSubPositionId)
    {
        if (bankStatementSubPositions.Count() > 1)
        {
            await client.DeleteAsync($"api/bankStatement/subposition/{bankStatementSubPositionId}");
            NotificationService.Notify(new NotificationMessage { Severity = NotificationSeverity.Success, Summary = "", Detail = Properties.Dictionary.sharedDeleteOk, Duration = 4000 });
            bankStatementSubPositions = null;
            bankStatementSubPositions = await client.GetFromJsonAsync<IEnumerable<BankStatementSubPosition>>(@$"api/bankStatement/position/getChildren/{bankStatementPosition.BsP_Id}");
            if (bankStatementSubPositions.Count() <= 1)
            {
                bankStatementPositions = await client.GetFromJsonAsync<IEnumerable<BankStatementPosition>>($"api/bankStatement/header/getChildren/{bankStatementHeader.BsH_Id}");
                await bspGrid.ExpandRow(bankStatementPositions.Where(x => x.BsP_Id == bankStatementPosition.BsP_Id).FirstOrDefault());

            }
            CheckAmountSum();
            await bspGrid.Reload();
            this.StateHasChanged();
        }
        else
        {
            NotificationService.Notify(new NotificationMessage { Severity = NotificationSeverity.Error, Summary = "", Detail = "Nie można usunąć wiersza - musi pozostać minimum jeden subelement dla danego elementu", Duration = 4000 });
        }
    }
    void CheckAmountSum()
    {
        sumWarningText = $"Suma elementów musi być równa {bankStatementPosition.BsP_Amount.ToString()} (aktualnie: {bankStatementSubPositions.Sum(x => x.BsS_Amount).ToString()}) ";
        if (bankStatementSubPositions.Sum(x => x.BsS_Amount) == bankStatementPosition.BsP_Amount)
            sumWarning = false;
        else
            sumWarning = true;
    }
}