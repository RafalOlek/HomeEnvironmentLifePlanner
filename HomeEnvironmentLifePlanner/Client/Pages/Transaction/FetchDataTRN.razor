@page "/transaction"
@inject HttpClient client
@inject IJSRuntime js
@using HomeEnvironmentLifePlanner.Shared.Models
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@inject NavigationManager navigatorManager


<h2><RadzenIcon Icon="receipt_long" /> Transakcje</h2>
<RadzenButton style="margin: 0 1rem 1rem 0" ButtonType="ButtonType.Button" ButtonStyle="ButtonStyle.Primary" Click="@(x=> navigatorManager.NavigateTo($"transaction/create"))" Icon="add_box" />
<br>
@if (transactionHeaders == null)
{
    <text>@HomeEnvironmentLifePlanner.Client.Properties.Dictionary.sharedLoading</text>
}
else if (transactionHeaders.Length == 0)
{
    <text>@HomeEnvironmentLifePlanner.Client.Properties.Dictionary.sharedNoRecords</text>
}
else
{

    <RadzenGrid Data="@transactionHeaders" AllowFiltering="true" AllowPaging="true" AllowSorting="true" TItem="TransactionHeader" ColumnWidth="200px">
        <Columns>
            <RadzenGridColumn TItem="TransactionHeader" Property="TrH_Id" Title="ID" />
            
            <RadzenGridColumn TItem="TransactionHeader" Property="Currency.CuR_Name<" Title="Waluta" />
            <RadzenGridColumn TItem="TransactionHeader" Property="Contractor.CtR_Name" Title="Kontrahent" />
            <RadzenGridColumn TItem="TransactionHeader" Property="TrH_ExecutionDate" Title="Data przelewu" />
            <RadzenGridColumn TItem="TransactionHeader" Property="PaymentType.PyT_Name" Title="Typ płatności" />
            <RadzenGridColumn TItem="TransactionHeader" Property="TrH_CreateDate" Title="Data utworzenia" />
            <RadzenGridColumn TItem="TransactionHeader" Property="TrH_Description" Title="Opis" />

            <RadzenGridColumn TItem="TransactionHeader" Context="transaction" Title="Akcje">
                <Template Context="transaction">
                    <RadzenButton style="margin: 0 1rem 1rem 0" ButtonType="ButtonType.Button" ButtonStyle="ButtonStyle.Primary" Click="@(x=> navigatorManager.NavigateTo($"transaction/edit/{transaction.TrH_Id}"))" Icon="create" />
                    <RadzenButton style="margin: 0 1rem 1rem 0" ButtonType="ButtonType.Button" ButtonStyle="ButtonStyle.Danger" Click="@(accountId=>Delete(transaction.TrH_Id) )" Icon="delete" />
                </Template>
            </RadzenGridColumn>
        </Columns>
    </RadzenGrid>
}
@code {
    TransactionHeader[] transactionHeaders { get; set; }
    protected override async Task OnInitializedAsync()
    {
        try
        {
            transactionHeaders = await client.GetFromJsonAsync<TransactionHeader[]>("api/transaction");

        }
        catch (AccessTokenNotAvailableException exception)
        {
            exception.Redirect();
        }

    }
    async Task Delete(int transactionId)
    {
        var trh = transactionHeaders.First(x => x.TrH_Id == transactionId);
        if (await js.InvokeAsync<bool>("confirm", $"{HomeEnvironmentLifePlanner.Client.Properties.Dictionary.sharedDeleteConfimation}'s rekord({trh.TrH_Id})?"))
        {
            await client.DeleteAsync($"api/transaction/{transactionId}");
            await OnInitializedAsync();
        }
    }
}