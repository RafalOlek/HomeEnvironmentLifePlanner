@page "/currency"
@inject HttpClient client
@inject IJSRuntime js
@using HomeEnvironmentLifePlanner.Shared.Models
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@inject NavigationManager navigatorManager

<h2><RadzenIcon Icon="euro" /> Waluty</h2>
<RadzenButton style="margin: 0 1rem 1rem 0" ButtonType="ButtonType.Button" ButtonStyle="ButtonStyle.Primary" Click="@(x=> navigatorManager.NavigateTo($"currency/create"))" Icon="add_box" />
<br>
@if (currencies == null)
{
    <text>@HomeEnvironmentLifePlanner.Client.Properties.Dictionary.sharedLoading</text>
}
else if (currencies.Length == 0)
{
    <text>@HomeEnvironmentLifePlanner.Client.Properties.Dictionary.sharedNoRecords</text>
}
else
{
    <RadzenGrid Data="@currencies" AllowFiltering="true" AllowPaging="true" AllowSorting="true" TItem="Currency" ColumnWidth="200px">
        <Columns>
            <RadzenGridColumn TItem="Currency" Property="CuR_Id" Title="ID" />
            <RadzenGridColumn TItem="Currency" Property="CuR_Name" Title="Nazwa waluty" />
            <RadzenGridColumn TItem="Currency" Context="currency" Title="Akcje">
                <Template Context="currency">
                    <RadzenButton style="margin: 0 1rem 1rem 0" ButtonType="ButtonType.Button" ButtonStyle="ButtonStyle.Primary" Click="@(x=> navigatorManager.NavigateTo($"currency/edit/{currency.CuR_Id}"))" Icon="create" />
                    <RadzenButton style="margin: 0 1rem 1rem 0" ButtonType="ButtonType.Button" ButtonStyle="ButtonStyle.Danger" Click="@(accountId=>Delete(currency.CuR_Id) )" Icon="delete" />
                </Template>
            </RadzenGridColumn>
        </Columns>
    </RadzenGrid>
}
@code {
    Currency[] currencies { get; set; }
    protected override async Task OnInitializedAsync()
    {
        try
        {
            currencies = await client.GetFromJsonAsync<Currency[]>("api/currency");
        }
        catch (AccessTokenNotAvailableException exception)
        {
            exception.Redirect();
        }

    }
    async Task Delete(int currencyId)
    {
        var cur = currencies.First(x => x.CuR_Id == currencyId);
        if (await js.InvokeAsync<bool>("confirm", $"{HomeEnvironmentLifePlanner.Client.Properties.Dictionary.sharedDeleteConfimation} {cur.CuR_Name}'s ({cur.CuR_Id})?"))
        {
            await client.DeleteAsync($"api/currency/{currencyId}");
            await OnInitializedAsync();
        }
    }
}