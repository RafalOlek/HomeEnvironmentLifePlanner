@page "/account"
@inject HttpClient client
@inject IJSRuntime js
@using HomeEnvironmentLifePlanner.Shared.Models
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@inject NavigationManager navigatorManager

<h2><RadzenIcon Icon="account_balance" /> Konta</h2>
<RadzenButton style="margin: 0 1rem 1rem 0" ButtonType="ButtonType.Button" ButtonStyle="ButtonStyle.Primary" Click="@(x=> navigatorManager.NavigateTo($"account/create"))" Icon="add_box" />
<br>
@if (accounts == null)
{
    <text>@HomeEnvironmentLifePlanner.Client.Properties.Dictionary.sharedLoading</text>
}
else if (accounts.Length == 0)
{
    <text>@HomeEnvironmentLifePlanner.Client.Properties.Dictionary.sharedNoRecords</text>
}
else
{
    <RadzenGrid Data="@accounts" AllowFiltering="true" AllowPaging="true" AllowSorting="true" TItem="Account" ColumnWidth="200px">
        <Columns>
            <RadzenGridColumn TItem="Account" Property="AcC_Id" Title="ID" />
            <RadzenGridColumn TItem="Account" Property="AcC_Name" Title="Nazwa konta" />
            <RadzenGridColumn TItem="Account" Property="AcC_ReferenceNumber" Title="Numer referencyjny" />
            <RadzenGridColumn TItem="Account" Context="account" Title="Akcje">
                <Template Context="account">
                    <RadzenButton style="margin: 0 1rem 1rem 0" ButtonType="ButtonType.Button" ButtonStyle="ButtonStyle.Primary" Click="@(x=> navigatorManager.NavigateTo($"account/edit/{account.AcC_Id}"))" Icon="create" />
                    <RadzenButton style="margin: 0 1rem 1rem 0" ButtonType="ButtonType.Button" ButtonStyle="ButtonStyle.Danger" Click="@(accountId=>Delete(account.AcC_Id) )" Icon="delete" />
                </Template>
            </RadzenGridColumn>
        </Columns>
    </RadzenGrid>
}
@code {
    Account[] accounts { get; set; }
    protected override async Task OnInitializedAsync()
    {
        try
        {
            accounts = await client.GetFromJsonAsync<Account[]>("api/account");

        }
        catch (AccessTokenNotAvailableException exception)
        {
            exception.Redirect();
        }
    }
    async Task Delete(int accountId)
    {
        var acc = accounts.First(x => x.AcC_Id == accountId);
        if (await js.InvokeAsync<bool>("confirm", $"{HomeEnvironmentLifePlanner.Client.Properties.Dictionary.sharedDeleteConfimation} {acc.AcC_Name}'s ({acc.AcC_Id})?"))
        {
            await client.DeleteAsync($"api/account/{accountId}");
            await OnInitializedAsync();
        }
    }
}